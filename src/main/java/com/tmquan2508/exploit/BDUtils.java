package com.tmquan2508.exploit;

import org.bukkit.Bukkit;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public final class BDUtils {
    private BDUtils() {}

    public static void sendDebug(String log) {
        if (!Config.debug_log) return;
        Bukkit.getConsoleSender().sendMessage(log);
    }

    public static class DynamicInvoker {
        public static <T> T invokeConstructor(Class<T> targetClass, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType constructorType = MethodType.methodType(void.class, paramTypes);
                MethodHandle handle = lookup.findConstructor(targetClass, constructorType);
                return (T) handle.invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke constructor for '" + targetClass.getName() + "': " + stackTrace(t));
                return null;
            }
        }

        public static Object invokeStaticMethod(Class<?> targetClass, String methodName, Class<?> returnType, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType methodType = MethodType.methodType(returnType, paramTypes);
                MethodHandle handle = lookup.findStatic(targetClass, methodName, methodType);
                return handle.invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke static method '" + methodName + "': " + stackTrace(t));
                return null;
            }
        }

        public static Object invokeInstanceMethod(Object target, String methodName, Class<?> returnType, Class<?>[] paramTypes, Object... args) {
            try {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                MethodType methodType = MethodType.methodType(returnType, paramTypes);
                MethodHandle handle = lookup.findVirtual(target.getClass(), methodName, methodType);
                return handle.bindTo(target).invokeWithArguments(args);
            } catch (Throwable t) {
                BDUtils.sendDebug("[DynamicInvoker] CRITICAL: Failed to invoke instance method '" + methodName + "': " + stackTrace(t));
                return null;
            }
        }

        private static String stackTrace(Throwable e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            return sw.toString();
        }
    }
}